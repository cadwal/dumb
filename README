
Well, to begin with, welcome to DUMB!  This a very sorry excuse for
documentation.  Sometime I will write some proper docs.


1. Copyright status etc.

All DUMB sources and binaries are distributed under the GNU General
Public License (GPL).  You should receive a copy of the GNU License
with the DUMB distribution; it is in the file COPYING.

The DUMB sources are a derived work of "wt", by Chris Laurel et al.
"wt" is also distributed under the GPL.  The parts of DUMB that are
not derived from "wt" were written by Josh Parsons.  He holds
copyright on them, and on DUMB as a whole.  Currently, DUMB is
maintained by Kalle Niemitalo.

Versions 0.06 to 0.12.beta1 of DUMB had a claim that you could
distribute software libraries derived from DUMB under the GNU Library
General Public License (LGPL) if you wanted.  This is not true.  "wt"
is distributed under the GPL rather than the LGPL, and DUMB inherits
its license.  We can't give you more rights than we self have.

The upshot of this licensing system, for those unfamiliar with the
GPL, is that you are able to freely redistribute both these sources
and binaries built from them, as much as you want.  You may also
incorporate them into derived works of your own, provided you
distribute the derived works in source form under the GPL yourself.

If you do modify DUMB, please send me your changes (see contact
details at the end of this file).


2. What is DUMB?

DUMB is a 3D game engine, reminiscent of id software's Doom.  In fact
it is gamefile (.WAD) compatible with Doom, and the related games Doom
II and Heretic.  The internal workings of DUMB are quite different to
those of Doom, though.

Specifically:

a) DUMB does not use a BSP (binary space partitioning) algorithm to
order wall textures.  Instead it insertion-sorts the walls on the fly
(a feature inherited from wt).  This has the advantage that map
vertices can move during the game without a costly BSP tree
reconstruction.

b) DUMB adds several new lumps to game wads to control texture
animation and object behaviour.  The Doom engine requires these to be
compiled into the game.  A single binary of DUMB can thus play a
variety of different games.

c) DUMB is more generalised in several miscellaneous ways.  For
example, it can render into large framebuffers at 8, 16 or 32 bits per
pixel.  Panning the camera up and down is possible (though this just
moves the horizon around on the screen, it doesn't change the
perspective that walls and objects are seen at).  Textures can be
displayed at various resolutions.  Very tall (>128 pixels) textures
are possible.  Textures can be vertically tiled at any power-of-two
height between 4 and 1024, and horizontally tiled at any width.  And
there's more....


DUMB is reasonably fast given this: an important goal for me has been
to keep it running reasonably well on an i486-based Linux box (since
that's what I've got).  I've only just managed to keep to this - DUMB
runs adequately on the fastest 486es.  It's a lot nicer on a pentium
or PowerPC (or so I'm told).  I wouldn't bother trying on a 386 or
486-33 though.

DUMB is also very much a work in progress.  It is not complete.  I'm
only releasing it because I thought that if I didn't now, I might
never.


2.1  History of DUMB:

[By Dr. Parsons]

Some time in 1995, I was playing around with Chris Laurel's wt.  I
thought I would experiment by tuning it up to preview Doom WADFiles.
And thus DUMB was born.  I hacked about the renderer to use Doomish
data formats internally, and eventually pulled it out of the rest of
wt, rewrote bits, fixed bugs and generally hacked it around.  For a
couple of years, this process continued at a slow pace.  DUMB
gradually ceased to be a 2-hour hack, and became some kind of coherent
whole.  I ported it to MS-DOS, hacked the DOS version some, and ported
it back to Linux again.  It collected a X-based level editor, and
various tools to generate other necessary bits of wadfiles.

In July 1997, I decided that it was going too slowly, and that I'd
release it out into the world to see if anyone else was interested in
helping, or even just commenting on it.  

The response of the Linux community was, well, overwhelming.  My
humble 486/80 ran hot with ftp requests.  Many people sent advice,
praise, and patches for the engine.  Since then I've been working on
DUMB fairly steadily; and full playability of all Doom .wads is not
far away.


3. Compiling and installing DUMB.

3.1 Requirements.

The version numbers mentioned are those that were used.  Newer versions
should work.  Older versions may work too.

You always need:
- GCC 2.7.2.1.  DUMB uses GCC-specific extensions: zero-length arrays,
  __alignof__, non-constant initializers, long long int and //
  comments.  The last two of these should be in the next C standard
  too.

For big-endian machines:
- GNU C++ compiler or another one that accepts -x c++ -fenum-int-equiv
  to compile .c files as C++.  C++ libraries are not needed.  This C++
  compilation is actually a hack that we should get rid of.

To build doom4dum.wad and htic4dum.wad:
- netpbm (Release 7 December 1993, but some files seem to be from
  March 1994)

For XWad and XProtoThing:
- X11R6 headers and libraries

If you edit the source, you may need the following packages:
- Autoconf version 2.12
- automake (GNU automake) 1.2
- GNU Make version 2.75
- GNU m4 1.4

Supported but not required:
- AA-lib                        <aalib.h>
- GGI                           <ggi/libggi.h>
- grx20 for DOS                 <grx20.h>
- MIT-SHM extension             <X11/extensions/XShm.h>
- MME sound for Digital Unix    <mme/mme_api.h>
- Open Sound System for Linux   <linux/soundcard.h>, /dev/dsp
- SVGAlib                       <vga.h>
- XFree86-DGA extension         <X11/extensions/xf86dga.h>
- XKEYBOARD extension           <X11/XKBlib.h>


3.2 Configuring and compiling.

Before you can do either, you'll need to unpack the archive you got
DUMB in (you must have done this already, or else how would you be
reading this file?)

The graphics and map for the sample game are now distributed
seperately from the sources.  This is because they take up a lot of
space without being terribly functional.  Nevertheless, you will need
them if you do not have a copy of Doom or Heretic to play with.  They
are in dumb-game-<version>.zip  If you have this file, unpack it too.

You should get a directory called something like "dumb-0.12", with a
configure script, some other files and several subdirectories in it.
Change to the directory and run the script.  (See the files INSTALL
and docs/autoconf for the options you can give to it.)  It'll create
config.h and some Makefiles.

The configure script should work on pretty much all machines; if it
doesn't, I'd like to hear.

If you use FVWM2, you might want to copy docs/xrosella.xpm to wherever
all the XPM pixmaps are on your system (usually
/usr/include/X11/pixmaps), and add the following lines to your
.fvwm2rc:

Style "dumb" Icon xrosella.xpm, NoButton 2, NoHandles
Style "XWad" Icon xrosella.xpm
Style "XProtoThing" Icon xrosella.xpm

When you're ready, type "make" or "make install" to compile
everything.  What you get depends on what libraries and features the
configure script found on your machine.

If you have AA-lib, you get:
- aadumb (Doom in text-mode! I kid you not!)
         (See http://horac.ta.jcu.cz/aa for more info on AA-lib.)

If you have GGI installed:
- ggidumb, dumb for Linux-GGI.

If you have SVGAlib:
- ldumb (linux dumb).

If you have X11:
- xdumb (supports shared memory, XFree86-DGA and XKB if your system
  has those),
- XWad, the level editor,
- XProtoThing, a tool for previewing ProtoThings (esp. monsters),
- mkdfnt, a tool for converting X fonts to a Doom/DUMB-compatible form.

If you have netpbm:
- dark2trans, converts dark pixels to transparent,
- ppmtodumb, converts ppm graphics to sprites and textures.  Note that
  you need this program to build doom4dum.wad and htic4dum.wad.

If you have Doom or Doom II and the script found its IWAD:
- doom4dum.wad, a patch wad that patches Doom and Doom II's IWADs to
  work with Dumb.

If you have Heretic and the script found its IWAD:
- htic4dum.wad, a similar (but less complete) patch for Heretic.

Whatever you have, you get:
- fixed_bm, a benchmark measuring how fast your machine is at the
  fixed-point calculations DUMB uses,
- mknulmap, a single-room map generator,
- ptcomp, a program for compiling textual ProtoThing etc. definitions
  to lumps for inclusion in WADs,
- wadtool, a WAD copy/extract program,
- mkpnames... "mkpnames is used to compile metatexture information
  into the PNAMES and TEXTURE1 lumps used by dumb."  But it seems
  unused.


3.3 Installing and uninstalling DUMB.

When compilation is complete, the produced executables and WADs are in
the subdirectories.  You can play them from there or you can run "make
install" to copy them to their official places.

Programs fixed_bm, mkdfnt and mkpnames won't be installed.

If you later change your mind (oh no!), you can run "make uninstall"
to remove them if you still have the sources left.

Of course you can use "cp" and "rm" if you want.


4. Playing.

There are basically two things you can do with DUMB.  You can play
Doom, Doom II, or Heretic levels, or you can make up your own level
with your own graphics and objects, and play with that.

The way DUMB works at the moment, you move around with the arrow keys.
Q and W cycle through the weapons (although currently both in the same
direction), A and Z levitate you up and down, Ctrl shoots, Shift runs,
Alt strafes.  You can also use the numeric keypad (highly
recommended):

	7: aim down,      8: walk forward,   9: aim up,
	4: turn left,                        6: turn right,
	1: sidestep left, 2: walk backward,  1: sidestep right.

Some alternative keys have been defined primarily for use with AA-lib:

	s: shoot,	d: aim up,	c: aim down,
	h: turn left,	j: backward,	k: forward,	l: turn right,
   	, or <: sidestep left,	   	. or >: sidestep right.

These are letters so they can be used with Shift to move faster.
However, the AA-lib driver doesn't yet support strafing with Meta or
firing with Control.

Numbers outside the number pad should select weapons but currently
they are used for various cheats and special functions:

	1: warp to next level (secret if possible),
	2: all weapons, full ammo, all keys,
	3: open the way out on boss levels (should be automated),
	4: resurrect yourself,
	9: save snapshot in ./snapshot.ppm.

In the X11 and AA-lib versions, you can reconfigure all the keys with
options like --keymap-next-weapon Tab.  You can also put the
corresponding definitions in the .dumbrc configuration file.

With GGI and SVGAlib, you can't change the bindings except by editing
the source and recompiling.  But those versions let you use a mouse.
If you are using SVGAlib, you may need to tell DUMB about your mouse
type: use

  ldumb --input-mouse-type <type>

Where <type> is one of microsoft, mousesystems, mmseries, logitech,
busmouse, ps2 or logiman.


4.1 Playing Doom levels with DUMB.

This is easy.  Compile DUMB.  Now all you need is a Doom (or Doom II)
wadfile; a shareware one will do.  Shareware Doom wadfiles are
distributed with many Linux distributions, or you can download one
from ftp.idsoftware.com or ftp.cdrom.com.  Invoke DUMB like so:

ldumb -w doom.wad doom4dum.wad -m E1M5

or

xdumb -w doom2.wad doom4dum.wad -m MAP10

(remember to use the right directory name for doom4dum.wad) and away
it will go.  You can modify things a bit with some other command-line
options (ldumb -? will get you a list).  For example, you can tell
DUMB what size framebuffer to use (ldumb is limited by available video
modes) and how many bytes there are to a pixel.

You can load patch-WADs by listing them on the command line after
doom.wad and doom4dum.wad

Unlike Doom, DUMB can cope with patches that add new sprites or flat
textures, without having to play tricks with modified IWADs.


4.2  Playing Heretic levels

This can be done in much the same way as Doom:

ldumb -w heretic.wad htic4dum.wad -m E1M1 -n

The sources for htic4dum.wad are stored in the htic directory.  They
are not nearly as complete as those for Doom.  If you would like to
contribute here, please drop me a line.


4.3 Brewing your own.

This is the fun bit.  You probably don't want to try this unless
you're an old hand at creating Doom levels, mostly because I haven't
documented the tools well enough yet.

There are two distinct stages to creating your own levels:


4.3.1 Making the base wadfile.

(Nowadays, the sources for game.wad aren't included in the DUMB
package, so not much of the following is valid.)

First, you need a base wadfile, containing textures, sprites,
palettes, and colormaps.  For this you can either use Doom's IWAD, or
make your own.  I'm assuming you want to do the latter.  Fortunately,
it's all there in the Makefile:

make game.wad

will make an IWAD in game.wad.  It'll contain all the textures that
come with DUMB in the game/gfx/ directory.  At the moment there are
two sprites, a newspaper icon, and a sort of fireball that you shoot
with the 1 key.  I have not been able to find any decent freely
available sprites, and I'm not enough of an artist to draw my own.
You will probably want to add some textures of your own.  To do this,
you need to edit the Makefile (to add textures) and game/misc/textures
(metatexture information; goes into PNAMES and TEXTURE1).  If this is
all gibberish to you, sorry; you might like to have a read of the Doom
spec (dmspec.txt) to get an idea of what's going on here.

I really need to document this better. :(

Oh, yes, and you'll need netpbm for this to work!  netpbm sources are
available from ftp.x.org (in the contrib directory) or from the dumb
site on samba.anu.edu.au.  Linux binaries (*much* easier to install)
are on sunsite.unc.edu and its mirrors, in /pub/Linux/apps/graphics/convert.


4.3.2 Creating levels.

To do this, use XWad.  XWad -? will get you a list of options; they
are more or less the same as DUMB's.  You need X to use it of course.
Basicially, you invoke XWad with:

XWad -w game -m ""

This will start you off editing an empty level.  You can also edit
existing levels with (eg):

XWad -w doom.wad -m E2M1

or

XWad -w game.wad -m E1M1

I hope that XWad is reasonably straightforward to use.  The only
important thing that isn't obvious is the mouse buttons: The left
button selects the nearest entity (vertex, line, thing, sector), the
middle button creates one (if possible), and the right button scrolls
the map.  Holding down Shift with the Select (left) or Create (middle)
buttons extends the selection over several entities.

You can drag vertices around with the left button too, but only if the
drag starts on top of a vertex (this is to stop you dragging things
when you only wanted to select them.

To get the hang of it, start by making a room.  Hold down shift and
click the middle mouse button on the vertices of a convex polygon.
You'll see the vertices appear as you do this.  They each have a
coloured box around them because they'll all selected (if you hadn't
held down Shift only the last one you created would be selected at any
one time).

Now click on the Connect button (underneath "Vertex #").  XWad will
connect up the vertices clockwise with lines, and warp you into line
mode.  Now click MkSector.  This will make the sector.  Now all you
have to do is fill in the details of light level, floor and ceiling
height and textures, etc.  And then go back to line mode and fill in
the textures for those lines.

You can get a dialog box with a list of available textures and their
images that you can select with the mouse by clicking on the space we
you'd type in the name of the texture.

To create a pillar in the room, repeat the process, putting the
vertices you want for your pillar inside the room; but then use CCW to
connect them counter-clockwise.  You'll need to manually set the lines
to be part of the larger sector (this is something that ought to be
done automatically, but isn't yet).

You will have to figure out the rest for yourself.


5. The Future

This section is just a summary of what I plan to do with DUMB.  It
will always be GPLed.  I'm just not interested in creating proprietary
software (I don't use any, either).

[This isn't going to change.  - Kalle]

I've made a web page for DUMB at http://samba.anu.edu.au/dumb
Any news will turn up there.  

I've released DUMB as it is because I have increasingly little time to
work on it, and I'm worried that, if I delay, the technology involved
may become obsolete.  And because I've really enjoyed and learned from
freely available source (most notably, wt and the Linux kernel) and
want to put something back....

OK, now suppose I actually do get a chance to do anything more (or
supposing someone out there cares enough to do it for me) here are
some things that need doing:

XWad needs to be made smoother to use in lots of ways.  It might be
easier to write online help for it than documentation!

It'd be nice to have some more original sprites and state-machines.  I
keep meaning to try my hand at claymation.

Need to arrange more extensions to Doom.  Moving vertices!  Sideways
opening doors.  Not sure how to accomodate this in .WADs.  Probably
best to make up new lumps eg: LINEEXTS (a list of extended information
about lines, in the same order as LINEDEFS).


6. Contact information. 

[I maintain DUMB nowadays, as Josh's school eats his time.

    Email: tosi@stekt.oulu.fi

      WWW: http://stekt.oulu.fi/~tosi/

Snailmail: Kalle Niemitalo
           Takkurannantie 36
           90820 Kello
           Finland

If you are in the mood of sending postcards saying how great DUMB is,
please send them to Josh instead.]

Should you wish to contact me, my email address is:

josh@coombs.anu.edu.au

and my snailmail address:

Josh Parsons
Philosophy, RSSS
The Australian National University
Canberra, ACT 0200
Australia

If you want to know more about me, you can read my web page:

http://schlick.anu.edu.au/~josh

If you like DUMB, please send a postcard, at least.
