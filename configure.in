dnl Process this file with autoconf to produce a configure script.
AC_INIT(libdumb/dsound.h)
AC_CONFIG_AUX_DIR(aux)
AM_INIT_AUTOMAKE(dumb, 0.13.4)
AM_CONFIG_HEADER(config.h)

# $datadir is usually '${prefix}/share'.  Expand it once.  This does
# not handle spaces in $datadir, since I'm not sure how to use
# multilevel quotes.
dumb_expanded_datadir=`eval "echo $datadir"`
AC_DEFINE_UNQUOTED(DUMB_CONFIG_DUMBDATADIR, "${dumb_expanded_datadir}/dumb")

dnl --- Optional parts.
AC_MSG_CHECKING([whether libdumbworldb is requested])
AC_ARG_ENABLE(libdumbworldb,
  [  --enable-libdumbworldb  enable the worldbase (doesn't work yet)],
  [:],
  [enable_libdumbworldb="no"])
dnl This is of course not cached.
if test "$enable_libdumbworldb" = "no"; then
  AC_MSG_RESULT([no])
else
  AC_MSG_RESULT([yes])
  AC_DEFINE(DUMB_CONFIG_LDWB)
  AC_MSG_WARN([libdumbworldb is rather incomplete; you may have problems])
fi
AM_CONDITIONAL(DUMB_CONFIG_LDWB, [test "$enable_libdumbworldb" != "no"])

dnl --- Framebuffer bits.
AC_MSG_CHECKING(what kind of framebuffers to support)
dumb_bpp_names=""
DUMB_RENDER_SOURCES=""
DUMB_ARG_HELP(
  [  Framebuffer bits: Disable at most two.  [support all]])
AC_ARG_ENABLE(8bpp,
  [  --disable-8bpp          don't support framebuffers with 8 bits per pixel])
AC_ARG_ENABLE(16bpp,
  [  --disable-16bpp         don't support framebuffers with 16 bits per pixel])
AC_ARG_ENABLE(32bpp,
  [  --disable-32bpp         don't support framebuffers with 32 bits per pixel])
if test "$enable_8bpp" != "no"; then
  dumb_bpp_names="$dumb_bpp_names 8bpp"
  DUMB_RENDER_SOURCES="$DUMB_RENDER_SOURCES render8.c"
  AC_DEFINE(DUMB_CONFIG_8BPP)
fi
if test "$enable_16bpp" != "no"; then
  dumb_bpp_names="$dumb_bpp_names 16bpp"
  DUMB_RENDER_SOURCES="$DUMB_RENDER_SOURCES render16.c"
  AC_DEFINE(DUMB_CONFIG_16BPP)
fi
if test "$enable_32bpp" != "no"; then
  dumb_bpp_names="$dumb_bpp_names 32bpp"
  DUMB_RENDER_SOURCES="$DUMB_RENDER_SOURCES render32.c"
  AC_DEFINE(DUMB_CONFIG_32BPP)
fi
AC_SUBST(DUMB_RENDER_SOURCES)
if test -n "$dumb_bpp_names"; then
  AC_MSG_RESULT($dumb_bpp_names)
else
  AC_MSG_RESULT(nothing!)
  AC_MSG_WARN(No support included for framebuffers of any depth)
fi

dnl --- Checks for programs.
AC_PROG_CC
DUMB_MSG_REQUIRE_YES(GCC, [GCC])
dnl GCC always supports -c -o
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PROG_INSTALL
AC_PROG_LN_S

dnl AM_GNU_GETTEXT wants this and it must be called before AC_TRY_COMPILE.
AC_ISC_POSIX

dnl --- Checks for typedefs, structures, and compiler characteristics.
AC_PROG_GCC_TRADITIONAL
AC_C_CONST
AC_C_INLINE
AC_C_BIGENDIAN
DUMB_C_ATTR_REGPARM
AC_TYPE_SIZE_T
AC_CHECK_SIZEOF(int, 0)
AC_CHECK_SIZEOF(long, 0)
AC_MSG_CHECKING(which fbrerend to use)
fbrerend="generic"
if test $ac_cv_c_bigendian = no; then
  if test $ac_cv_sizeof_long -ge 8; then
    fbrerend="le64"
  elif test $ac_cv_sizeof_int -ge 4; then
    fbrerend="le32"
  fi
fi
AC_MSG_RESULT($fbrerend)
DUMB_FBREREND_SOURCES="${fbrerend}_fbrerend.c"
AC_SUBST(DUMB_FBREREND_SOURCES)

dnl --- C++ compilation hack.
dnl To avoid having to change intl/Makefile.in, the C-as-C++ compiler
dnl invocation command is saved in $CXX_HACK_CC and not directly in
dnl $CC.  The contents of intl/ should be identical in all GNU
dnl packages, so they can be updated automatically when a new version
dnl of gettext is released.
AC_ARG_ENABLE(c,
  [  --disable-c             always compile as C++, not C],
  [if test "$enableval" != "no"; then
    AC_MSG_WARN([--enable-c not supported])
  fi],
  [enable_c=yes])
if test "$ac_cv_c_bigendian" = "yes" || test "$enable_c" = "no"; then
  DUMB_PROG_CXX_C
  CXX_HACK_CC="$dumb_cv_prog_cxx_c"
  # The Makefiles in the hack-needing directories assign $CXX_HACK_CC
  # to CC.  $CC is used for linking too and the -x c++ in it would
  # cause the .o files to be interpreted as C++ too!  Override that.
  # This assumes GCC but that's fine.
  LDFLAGS="-x none $LDFLAGS"
else
  CXX_HACK_CC="$CC"
fi
AC_SUBST(CXX_HACK_CC)

dnl --- Internationalization.
ALL_LINGUAS="fi"
AM_GNU_GETTEXT
AC_OUTPUT_COMMANDS([sed -e "/POTFILES =/r po/POTFILES" po/Makefile.in >po/Makefile])
AC_DEFINE_UNQUOTED(LOCALEDIR, "${dumb_expanded_datadir}/locale")

dnl --- Checks for libraries.
AC_PATH_X
AC_PATH_XTRA
AM_CONDITIONAL(DUMB_CONFIG_X, test -z "$no_x")
if test -z "$no_x"; then
  # Always have the X include and library directories in the search paths,
  # even if the file being compiled or linked doesn't use X.
  CPPFLAGS="$CPPFLAGS $X_CFLAGS"
  LDFLAGS="$LDFLAGS $X_LIBS"
  # This variable is used in the aalib check.
  x_ldadd="$X_PRE_LIBS -lX11 $X_POST_LIBS"
else
  x_ldadd=""
  AC_MSG_WARN([X not found; programs \`xdumb', \`mkdfnt', \`XWad' and \`XProtoThing' will not be built])
fi
DUMB_PPL_LDADD=""
AC_CHECK_LIB(ppm, ppm_readppm, dumb_have_libppm=yes, dumb_have_libppm=no,
  -lpgm -lpbm)
test "$dumb_have_libppm" = "yes" && DUMB_PPM_LDADD="-lppm -lpgm -lpbm"
if test "$dumb_have_libppm" = "no"; then
  AC_CHECK_LIB(netpbm, ppm_readppm, dumb_have_libppm=yes)
  test "$dumb_have_libppm" = "yes" && DUMB_PPM_LDADD="-lnetpbm"
fi
if test "$dumb_have_libppm" = "no"; then
  AC_MSG_WARN([ppm_readppm() not found; programs \`dark2trans' and \`ppmtodumb' will not be built])
fi
AM_CONDITIONAL(DUMB_CONFIG_LIBPPM, test "$dumb_have_libppm" = "yes")
AC_SUBST(DUMB_PPM_LDADD)
AC_CHECK_LIB(m, sin, ,
  [AC_MSG_ERROR([DUMB requires the math library])])
DUMB_CHECK_HDR_LIB_YESNO(aalib.h, aa, aa_renderpalette, [-lncurses $x_ldadd],
 dumb_have_aalib)
AM_CONDITIONAL(DUMB_CONFIG_AALIB, test "$dumb_have_aalib" = "yes")
if test "$dumb_have_aalib" = "no"; then
  AC_MSG_WARN([AA-lib not found; program \`aadumb' will not be built])
fi
# For GGI, we assume the library is there if the headers is there.
# If you don't like this, submit a patch.  But beware: Degas requires
# -lgii -lgg but older snapshots didn't have them.
DUMB_GGI_SOURCES=""
DUMB_GGI_LDADD=""
AC_CHECK_HEADER([ggi/ggi.h],
  [DUMB_CHECK_IFDEF([ggi/ggi.h], [GII_PBUTTON_PRIMARY],
    [DUMB_GGI_SOURCES="ggi_degas_video.c" DUMB_GGI_LDADD="-ggi -lgii -lgg"],
    [DUMB_CHECK_IFDEF([ggi/ggi.h], [GGI_KEY_ENTER],
      [DUMB_GGI_SOURCES="ggi_olddegas_video.c" DUMB_GGI_LDADD="-lggi"
      AC_MSG_WARN([Future versions of DUMB won't support your version of GGI.])
      AC_MSG_WARN([Please upgrade to the Degas release.])],
      [AC_MSG_WARN([Your version of GGI is not supported; upgrade to the latest Degas!])
      AC_MSG_WARN([Program \`ggidumb' will not be built])])])],
  [AC_MSG_WARN([GGI not found; program \`ggidumb' will not be built])])
AC_SUBST(DUMB_GGI_SOURCES)
AC_SUBST(DUMB_GGI_LDADD)
AM_CONDITIONAL(DUMB_CONFIG_GGI, [test -n "$DUMB_GGI_SOURCES"])
DUMB_CHECK_HDR_LIB_YESNO(vga.h, vga, vga_setmode, [],
 dumb_have_svgalib)
AM_CONDITIONAL(DUMB_CONFIG_SVGALIB, test "$dumb_have_svgalib" = "yes")
if test "$dumb_have_svgalib" = "no"; then
  AC_MSG_WARN([SVGAlib not found; program \`ldumb' will not be built])
fi
DUMB_CHECK_HDR_LIB_YESNO(allegro.h, alleg, allegro_init, [],
 dumb_have_allegro)
AM_CONDITIONAL(DUMB_CONFIG_DOS, test "$dumb_have_allegro" = "yes")
if test "$dumb_have_allegro" = "no"; then
  AC_MSG_WARN([Allegro not found; program \`dosdumb' will not be built])
fi

dnl --- Checks for header files.
AC_HEADER_STDC
DUMB_MSG_REQUIRE_YES(ac_cv_header_stdc, [ANSI C header files])
AC_HEADER_SYS_WAIT
DUMB_MSG_REQUIRE_YES(ac_cv_header_sys_wait_h, [sys/wait.h])
AC_HEADER_TIME
DUMB_MSG_REQUIRE_YES(ac_cv_header_time, [ability to use time.h with sys/time.h])
AC_CHECK_HEADERS(fcntl.h limits.h sys/ioctl.h sys/time.h unistd.h)
DUMB_MSG_REQUIRE_YES(ac_cv_header_fcntl_h, [fcntl.h])
DUMB_MSG_REQUIRE_YES(ac_cv_header_limits_h, [limits.h])
DUMB_MSG_REQUIRE_YES(ac_cv_header_sys_time_h, [sys/time.h])
DUMB_MSG_REQUIRE_YES(ac_cv_header_unistd_h, [unistd.h])
dnl sys/ioctl.h is needed for sound only.

dnl --- Checks for library functions.
dnl DUMB only uses if(memcmp(...)) and if(!(memcmp(...)) and doesn't care of
dnl the sign of the return value, so memcmp() needn't be 8-bit clean.
dnl AC_FUNC_MEMCMP
AC_FUNC_MMAP
AC_FUNC_SETVBUF_REVERSED
DUMB_MSG_REQUIRE_NO(ac_cv_func_setvbuf_reversed, [reversed setvbuf()])
AC_TYPE_SIGNAL
AC_FUNC_VPRINTF
DUMB_MSG_REQUIRE_YES(ac_cv_func_vprintf, [vprintf()])
AC_CHECK_FUNCS(strdup strstr fork setitimer)

dnl --- Checks for system services.
DUMB_SYS_SHMAT_RMID
if test "$dumb_cv_sys_shmat_rmid" = yes; then
  AC_DEFINE(DUMB_CONFIG_SYS_SHMAT_RMID)
fi

dnl --- Video.
dnl This is almost straight from info (automake)Conditionals ...
AC_ARG_ENABLE(dummy-video,
  [  --enable-dummy-video    make a version that doesn't show what happens],
[case "${enableval}" in
  yes) dummyvideo=true ;;
  no)  dummyvideo=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-dummy-video) ;;
esac], [dummyvideo=false])
AM_CONDITIONAL(DUMB_CONFIG_DUMMYVIDEO, test x$dummyvideo = xtrue)

DUMB_XSHM_LDADD=""
DUMB_DGA_LDADD=""
DUMB_XKB_LDADD=""
if test -z "$no_x"; then
  dumb_old_LIBS="$LIBS"
  LIBS="$LIBS $X_PRE_LIBS"
  DUMB_CHECK_HDR_LIB(X11/extensions/XShm.h, Xext, XShmCreateImage,
   [-lX11 $X_EXTRA_LIBS],
   [AC_DEFINE(DUMB_CONFIG_XSHM)
    DUMB_XSHM_LDADD="-lXext"], [])
  # This may cause -lXext to be given twice
  # but I don't think that's a problem.
  DUMB_CHECK_HDR_LIB(X11/extensions/xf86dga.h, Xxf86dga, XF86DGADirectVideo,
   [-lXext -lX11 $X_EXTRA_LIBS],
   [AC_DEFINE(DUMB_CONFIG_XF86DGA)
    DUMB_DGA_LDADD="-lXxf86dga -lXext"], [])
  DUMB_CHECK_HDR_LIB(X11/XKBlib.h, X11, XkbSetDetectableAutoRepeat,
   [$X_EXTRA_LIBS],
   [AC_DEFINE(DUMB_CONFIG_XKB)
    DUMB_XKB_LDADD="" # integrated in Xlib], [])
  LIBS="$dumb_old_LIBS"
fi
AC_SUBST(DUMB_XSHM_LDADD)
AC_SUBST(DUMB_DGA_LDADD)
AC_SUBST(DUMB_XKB_LDADD)

dnl --- DOOM and Heretic.
dnl
dnl The GNU Coding Standards say:
dnl
dnl     Do not use a `--with' option to specify the file name to use to
dnl     find certain files.  That is outside the scope of what `--with'
dnl     options are for.
dnl
dnl FIXME.
dnl
AC_MSG_CHECKING(for doom.wad)
DUMB_CONFIG_DOOM_WAD=""
AC_ARG_WITH(doom-wad,
  [  --with-doom-wad=FILE    support playing DOOM levels],
[if test -n "$withval" && test "$withval" != no; then
  if test -r "$withval" && test ! -d "$withval"; then
    DUMB_CONFIG_DOOM_WAD="$withval"
  else
    AC_MSG_ERROR([$withval doesn't exist or isn't readable])
  fi
fi],
[# Look for the WAD in some places it might be in.
#
# The `pwd` is necessary for getting an absolute filename.  Could use
# $PWD instead but I don't think that's as portable.
#
# In `cd ..; pwd`, the cd may fail.  In that case, the script will
# look in the current directory again.  I could use `cd .. && pwd`
# instead but then the script would look for the wad in the root
# directory which is clearly wrong.
for TESTWAD in $dumb_expanded_datadir/doom/doom*.wad \
	$dumb_expanded_datadir/dumb/doom*.wad \
	/usr/local/games/lib/doom/doom*.wad \
	/usr/local/games/lib/doom2/doom*.wad \
	/usr/local/games/doom/doom*.wad \
	/usr/local/games/doom2/doom*.wad \
	/usr/games/lib/doom/doom*.wad \
	/usr/games/lib/doom2/doom*.wad \
	/usr/games/doom/doom*.wad \
	/usr/games/doom2/doom*.wad \
	/usr/local/share/doom/doom*.wad \
	/usr/share/doom/doom*.wad \
	/usr/local/share/dumb/doom*.wad \
	/usr/share/dumb/doom*.wad \
	`pwd`/doom*.wad \
	$srcdir/doom*.wad \
	`cd ..; pwd`/doom*.wad
do
  if test -f $TESTWAD; then
    if echo $TESTWAD | grep 'doom4dum\.wad' >/dev/null; then
      : # this isn't from Doom
    else
      DUMB_CONFIG_DOOM_WAD=$TESTWAD
      break
    fi
  fi
done])
if test -z "$DUMB_CONFIG_DOOM_WAD"; then
  AC_MSG_RESULT(not found)
  AC_MSG_WARN([doom.wad not found; Doom support \`doom4dum.wad' will not be built])
else
  AC_MSG_RESULT($DUMB_CONFIG_DOOM_WAD)
  AC_DEFINE_UNQUOTED(DUMB_CONFIG_DOOM_DIR,
                     "`dirname ${DUMB_CONFIG_DOOM_WAD}`")
fi
AC_SUBST(DUMB_CONFIG_DOOM_WAD)
AM_CONDITIONAL(DUMB_CONFIG_DOOM, test -n "${DUMB_CONFIG_DOOM_WAD}")

AC_MSG_CHECKING(for heretic.wad)
DUMB_CONFIG_HERETIC_WAD=""
AC_ARG_WITH(heretic-wad,
  [  --with-heretic-wad=FILE support playing Heretic levels],
[if test -n "$withval" && test "$withval" != no; then
  if test -f "$withval"; then
    DUMB_CONFIG_HERETIC_WAD="$withval"
  else
    AC_MSG_ERROR([$withval doesn't exist or isn't a regular file])
  fi
fi],
[# Look for the WAD in some places it might be in.
# I don't know if there's a Unix version of Heretic but I try anyway.
# The `pwd` thing is explained in the Doom section above.
for TESTWAD in $dumb_expanded_datadir/heretic/heretic*.wad \
	$dumb_expanded_datadir/dumb/heretic*.wad \
	/usr/local/games/lib/heretic/heretic*.wad \
	/usr/local/games/heretic/heretic*.wad \
	/usr/games/lib/heretic/heretic*.wad \
	/usr/games/heretic/heretic*.wad \
	/usr/local/share/heretic/heretic*.wad \
	/usr/share/heretic/heretic*.wad \
	/usr/local/share/dumb/heretic*.wad \
	/usr/share/dumb/heretic*.wad \
	`pwd`/heretic*.wad \
	$srcdir/heretic*.wad \
	`cd ..; pwd`/heretic*.wad
do
  if test -f $TESTWAD; then
    # No need to test for htic4dum.wad.
    DUMB_CONFIG_HERETIC_WAD=$TESTWAD
    break
  fi
done])
if test -z "$DUMB_CONFIG_HERETIC_WAD"; then
  AC_MSG_RESULT(not found)
  AC_MSG_WARN([heretic.wad not found; Heretic support \`htic4dum.wad' will not be built])
else
  AC_MSG_RESULT($DUMB_CONFIG_HERETIC_WAD)
  AC_DEFINE_UNQUOTED(DUMB_CONFIG_HERETIC_DIR,
                     "`dirname ${DUMB_CONFIG_DOOM_WAD}`")
fi
AC_SUBST(DUMB_CONFIG_HERETIC_WAD)
AM_CONDITIONAL(DUMB_CONFIG_HERETIC, test -n "${DUMB_CONFIG_HERETIC_WAD}")

dnl --- Sound.
dnl This is pretty complicated.  The user can:
dnl  - select one sound system (--with-oss, --with-mme, --with-allegro)
dnl  - disable sound (--without-sound)
dnl  - autodetect but disable some systems (--without-oss, --without-mme,
dnl    --without-allegro)
dnl Disabling sound completely should have the same result as
dnl disabling each sound system separately.
dnl Note: Autoconf doesn't tell us which order the options were in, so
dnl we can't rely on that for priority.  I arbitrarily decide that
dnl --without-sound overrides individual sound systems.  The opposite
dnl way would be useless; --with-oss disables all other sound systems
dnl even without --without-sound.
dumb_sound_oss="autodetect"
dumb_sound_mme="autodetect"
dumb_sound_allegro="autodetect"
dumb_sound_specified=""
DUMB_CONFIG_SOUND=""
DUMB_CONFIG_SOUND_LDADD=""
DUMB_ARG_HELP(
  [  Sound: Choose one system.  [autodetect]])
AC_ARG_WITH(sound,
  [  --without-sound         disable sound altogether],
  if test "$withval" = "no"; then
    DUMB_CONFIG_SOUND=dummy
    AC_MSG_CHECKING(for sound)
    AC_MSG_RESULT(disabled)
  else
    AC_MSG_WARN([--with-sound not supported; use --with-oss or --with-mme])
  fi)
DUMB_ARG_MULTICHOICE(sound, oss, oss,
  [  --with-oss              use Open Sound System (Linux usually has this)])
DUMB_ARG_MULTICHOICE(sound, mme, mme,
  [  --with-mme              use MME for sound (for Alphas)])
DUMB_ARG_MULTICHOICE(sound, allegro, allegro,
  [  --with-allegro          use Allegro for sound (for DOS)])
DUMB_TEST_MULTICHOICE(DUMB_CONFIG_SOUND, sound, oss, OSS,
  DUMB_CONFIG_SOUND="linux"
  DUMB_CONFIG_SOUND_LDADD="",
  AC_CHECK_HEADER(linux/soundcard.h,
    DUMB_CONFIG_SOUND="linux"
    DUMB_CONFIG_SOUND_LDADD=""))
DUMB_TEST_MULTICHOICE(DUMB_SOUND, sound, mme, MME,
  DUMB_CONFIG_SOUND="mme"
  DUMB_CONFIG_SOUND_LDADD="-lmme",
  DUMB_CHECK_HDR_LIB(mme/mme_api.h, mme, waveOutGetNumDevs, [],
    DUMB_CONFIG_SOUND="mme"
    DUMB_CONFIG_SOUND_LDADD="-lmme", []))
DUMB_TEST_MULTICHOICE(DUMB_SOUND, sound, allegro, ALLEGRO,
  DUMB_CONFIG_SOUND="dos"
  DUMB_CONFIG_SOUND_LDADD="-lalleg",
  AC_CHECK_HEADER(allegro.h,
    DUMB_CONFIG_SOUND="dos"
    DUMB_CONFIG_SOUND_LDADD="-lalleg", []))
AC_MSG_CHECKING(which sound driver to use)
if test -z "$DUMB_CONFIG_SOUND"; then
  DUMB_CONFIG_SOUND="dummy"
fi
AC_SUBST(DUMB_CONFIG_SOUND)
AC_SUBST(DUMB_CONFIG_SOUND_LDADD)
AC_MSG_RESULT($DUMB_CONFIG_SOUND)

dnl --- Networking.
dnl Because only Unix and dummy networking are supported,
dnl I left out the force/disable options.
dumb_network=""
AC_CHECK_HEADER(sys/socket.h,
[# The system has socket.h.
# We need these functions:
#   socket()            -lsocket
#   gethostbyname()     -lnsl
# First check for them without anything special and then try extra libraries.
dumb_network="unix"
DUMB_NETWORK_LDADD=""
DUMB_SCAN_LIBS(socket, socket,
  [DUMB_NETWORK_LDADD="$DUMB_NETWORK_LDADD $library"],
  [AC_MSG_WARN([you have socket.h but no socket()])
   dumb_network=""])
DUMB_SCAN_LIBS(gethostbyname, nsl,
  [DUMB_NETWORK_LDADD="$DUMB_NETWORK_LDADD $library"],
  [AC_MSG_WARN([you don't have gethostbyname()])
   dumb_network=""])])
AC_MSG_CHECKING(which network driver to use)
if test -z "$dumb_network"; then
  dumb_network="dummy"
  DUMB_NETWORK_LDADD=""
  AC_MSG_WARN([you won't be able to play network games])
fi
DUMB_NETWORK_SOURCES="${dumb_network}_net.c"
AC_SUBST(DUMB_NETWORK_SOURCES)
AC_SUBST(DUMB_NETWORK_LDADD)
AC_MSG_RESULT($dumb_network)
if test "$dumb_network" = unix; then
  # We'll manage even without select() but use it if it exists.
  AC_CHECK_FUNCS(select)
fi

dnl --- Output.
AC_OUTPUT(Makefile libmissing/Makefile libdumbutil/Makefile
  libdumbwad/Makefile libdumbworldb/Makefile libdumbrender/Makefile
  libdumb/Makefile dumb/Makefile xwad/Makefile ptcomp/Makefile
  tool/Makefile doom/Makefile htic/Makefile test/Makefile
  docs/Makefile docs/dos/Makefile docs/maint/Makefile
  docs/patches/Makefile intl/Makefile po/Makefile.in aux/Makefile)

dnl Local Variables:
dnl comment-start: "dnl "
dnl comment-end: ""
dnl comment-start-skip: "\\bdnl\\b\\s *"
dnl compile-command: "autoconf"
dnl info-lookup-mode: autoconf-mode
dnl End:
