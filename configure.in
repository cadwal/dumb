#! /bin/bash
dnl Process this file with autoconf to produce a configure script.
AC_INIT(libdumb/texture.c)
AM_INIT_AUTOMAKE(dumb, 0.12.beta1)
AM_CONFIG_HEADER(config.h)

dnl --- Checks for programs.
AC_PROG_CC
DUMB_MSG_REQUIRE_YES(GCC, [GCC])
dnl GCC always supports -c -o
AC_PROG_CPP
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PROG_INSTALL
AC_PROG_LN_S

dnl --- Checks for libraries.
AC_CHECK_LIB(ppm, ppm_readppm, dumb_have_libppm=yes, dumb_have_libppm=no, 
  -lpgm -lpbm)
AM_CONDITIONAL(DUMB_CONFIG_LIBPPM, test "$dumb_have_libppm" = "yes")
AC_CHECK_LIB(m, sin, ,
  [AC_MSG_ERROR([DUMB requires the math library])])
DUMB_CHECK_HDR_LIB_YESNO(aalib.h, aa, aa_renderpalette, [], 
 dumb_have_aalib)
AM_CONDITIONAL(DUMB_CONFIG_AALIB, test "$dumb_have_aalib" = "yes")
DUMB_CHECK_HDR_LIB_YESNO(ggi/libggi.h, ggi, ggiSetGraphMode, [], 
 dumb_have_ggi)
AM_CONDITIONAL(DUMB_CONFIG_GGI, test "$dumb_have_ggi" = "yes")
DUMB_CHECK_HDR_LIB_YESNO(vga.h, vga, vga_setmode, [],
 dumb_have_svgalib)
AM_CONDITIONAL(DUMB_CONFIG_SVGALIB, test "$dumb_have_svgalib" = "yes")

dnl --- Checks for header files.
AC_HEADER_STDC
DUMB_MSG_REQUIRE_YES(ac_cv_header_stdc, [ANSI C header files])
AC_HEADER_SYS_WAIT
DUMB_MSG_REQUIRE_YES(ac_cv_header_sys_wait_h, [sys/wait.h])
AC_HEADER_TIME
DUMB_MSG_REQUIRE_YES(ac_cv_header_time, [ability to use time.h with sys/time.h])
AC_PATH_X
AC_PATH_XTRA
AM_CONDITIONAL(DUMB_CONFIG_X, test -z "$no_x")
AC_CHECK_HEADERS(fcntl.h limits.h sys/ioctl.h sys/time.h unistd.h)
DUMB_MSG_REQUIRE_YES(ac_cv_header_fcntl_h, [fcntl.h])
DUMB_MSG_REQUIRE_YES(ac_cv_header_limits_h, [limits.h])
DUMB_MSG_REQUIRE_YES(ac_cv_header_sys_time_h, [sys/time.h])
DUMB_MSG_REQUIRE_YES(ac_cv_header_unistd_h, [unistd.h])
dnl sys/ioctl.h is needed for sound only.

dnl --- Checks for typedefs, structures, and compiler characteristics.
AC_PROG_GCC_TRADITIONAL
AC_C_CONST
AC_C_INLINE
AC_C_BIGENDIAN
if test "$ac_cv_c_bigendian" = "yes"; then
  DUMB_PROG_CXX_C
  CC="$dumb_cv_prog_cxx_c"
fi
AC_TYPE_SIZE_T
AC_CHECK_SIZEOF(int, 0)
AC_CHECK_SIZEOF(long, 0)
AC_MSG_CHECKING(which fbrerend to use)
fbrerend="generic"
if test $ac_cv_c_bigendian = no; then
  if test $ac_cv_sizeof_long -ge 8; then
    fbrerend=le64
  elif test $ac_cv_sizeof_int -ge 4; then
    fbrerend=le32
  fi
fi
AC_MSG_RESULT($fbrerend)
AC_SUBST(DUMB_FBREREND_SOURCES)
DUMB_FBREREND_SOURCES="${fbrerend}_fbrerend.c"

dnl --- Checks for library functions.
dnl DUMB only uses if(memcmp(...)) and if(!(memcmp(...)) and doesn't care of
dnl the sign of the return value, so memcmp() needn't be 8-bit clean.
dnl AC_FUNC_MEMCMP
AC_FUNC_MMAP
AC_FUNC_SETVBUF_REVERSED
DUMB_MSG_REQUIRE_NO(ac_cv_func_setvbuf_reversed, [reversed setvbuf()])
AC_TYPE_SIGNAL
AC_FUNC_VPRINTF
DUMB_MSG_REQUIRE_YES(ac_cv_func_vprintf, [vprintf()])
AC_CHECK_FUNCS(strdup strstr)

dnl --- Video.
dnl This is almost straight from info (automake)Conditionals ...
AC_ARG_ENABLE(dummy-video,
  [  --enable-dummy-video    make a version that doesn't show what happens],
[case "${enableval}" in
  yes) dummyvideo=true ;;
  no)  dummyvideo=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-dummy-video) ;;
esac], [dummyvideo=false])
AM_CONDITIONAL(DUMB_CONFIG_DUMMYVIDEO, test x$dummyvideo = xtrue)

AC_SUBST(DUMB_XSHM_LDADD) DUMB_XSHM_LDADD=""
AC_SUBST(DUMB_DGA_LDADD) DUMB_DGA_LDADD=""
AC_SUBST(DUMB_XKB_LDADD) DUMB_XKB_LDADD=""
if test -z "$no_x"; then
  dumb_old_LIBS="$LIBS"
  # This is so that -L/usr/X11R6/lib comes before -lXext.
  LIBS="$LIBS $X_LIBS $X_PRE_LIBS"
  DUMB_CHECK_HDR_LIB(X11/extensions/XShm.h, Xext, XShmCreateImage, 
   [-lX11 $X_EXTRA_LIBS],
   [AC_DEFINE(DUMB_CONFIG_XSHM)
    DUMB_XSHM_LDADD="-lXext"], [])
  # This may cause -lXext to be given twice 
  # but I don't think that's a problem.
  DUMB_CHECK_HDR_LIB(X11/extensions/xf86dga.h, Xxf86dga, XF86DGADirectVideo,
   [-lXext -lX11 $X_EXTRA_LIBS],
   [AC_DEFINE(DUMB_CONFIG_XF86DGA)
    DUMB_DGA_LDADD="-lXxf86dga -lXext"], [])
  DUMB_CHECK_HDR_LIB(X11/XKBlib.h, X11, XkbSetDetectableAutoRepeat,
   [$X_EXTRA_LIBS],
   [AC_DEFINE(DUMB_CONFIG_XKB)
    DUMB_XKB_LDADD="" # integrated in Xlib], [])
  LIBS="$dumb_old_LIBS"
fi

dnl --- DOOM and Heretic.
dnl
dnl The GNU Coding Standards say:
dnl
dnl     Do not use a `--with' option to specify the file name to use to
dnl     find certain files.  That is outside the scope of what `--with'
dnl     options are for.
dnl
dnl However, those files are needed at build time and I see no other
dnl way to let the user say where they are.
dnl
AC_MSG_CHECKING(for doom.wad)
AC_SUBST(DUMB_CONFIG_DOOM_WAD) DUMB_CONFIG_DOOM_WAD=""
AC_ARG_WITH(doom-wad,
  [  --with-doom-wad=FILE    support playing DOOM levels],
[if test -n "$withval" && test "$withval" != no; then
  if test -r "$withval" && ! test -d "$withval"; then
    DUMB_CONFIG_DOOM_WAD="$withval"
  else
    AC_MSG_ERROR([$withval doesn't exist or isn't readable])
  fi
fi],
[# Look for the WAD in some places it might be in.
for TESTWAD in `pwd`/doom{,1,2}.wad \
	$srcdir/doom{,1,2}.wad \
	`cd ..; pwd`/doom{,1,2}.wad \
	/usr/games/doom/doom{,1}.wad \
	/usr/games/doom2/doom2.wad \
	/usr/local/games/doom/doom{,1}.wad \
	/usr/local/games/doom2/doom2.wad
do
  if test -f $TESTWAD; then
    DUMB_CONFIG_DOOM_WAD=$TESTWAD
    break
  fi
done])
if test -z "$DUMB_CONFIG_DOOM_WAD"; then
  AC_MSG_RESULT(not found)
else
  AC_MSG_RESULT($DUMB_CONFIG_DOOM_WAD)
  AC_DEFINE_UNQUOTED(DUMB_CONFIG_DOOM_WAD, "${DUMB_CONFIG_DOOM_WAD}")
fi
AM_CONDITIONAL(DUMB_CONFIG_DOOM, test -n "${DUMB_CONFIG_DOOM_WAD}")

AC_MSG_CHECKING(for heretic.wad)
AC_SUBST(DUMB_CONFIG_HERETIC_WAD) DUMB_CONFIG_HERETIC_WAD=""
AC_ARG_WITH(heretic-wad,
  [  --with-heretic-wad=FILE support playing Heretic levels],
[if test -n "$withval" && test "$withval" != no; then
  if test -f "$withval"; then
    DUMB_CONFIG_HERETIC_WAD="$withval"
  else
    AC_MSG_ERROR([$withval doesn't exist or isn't a regular file])
  fi
fi],
[# Look for the WAD in some places it might be in.
# I don't know if there's a Unix version of Heretic but I try anyway.
for TESTWAD in heretic.wad $srcdir/heretic.wad ../heretic.wad \
	/usr/games/heretic/heretic.wad /usr/local/games/heretic/heretic.wad
do
  if test -f $TESTWAD; then
    DUMB_CONFIG_HERETIC_WAD=$TESTWAD
    break
  fi
done])
if test -z "$DUMB_CONFIG_HERETIC_WAD"; then
  AC_MSG_RESULT(not found)
else
  AC_MSG_RESULT($DUMB_CONFIG_HERETIC_WAD)
  AC_DEFINE(DUMB_CONFIG_HERETIC_WAD, $DUMB_CONFIG_HERETIC_WAD)
fi
AM_CONDITIONAL(DUMB_CONFIG_HERETIC, test -n "${DUMB_CONFIG_HERETIC_WAD}")

dnl --- Sound.
dnl This is pretty complicated.  The user can:
dnl  - select one sound system (--with-uss, --with-mme)
dnl  - disable sound (--without-sound)
dnl  - autodetect but disable some systems (--without-uss, --without-mme)
dnl Disabling sound completely should have the same result as
dnl disabling each sound system separately.
dnl Note: Autoconf doesn't tell us which order the options were in, so
dnl we can't rely on that for priority.  I arbitrarily decide that
dnl --without-sound overrides individual sound systems.  The opposite
dnl way would be useless; --with-uss disables all other sound systems
dnl even without --without-sound.
dumb_sound_oss="autodetect"
dumb_sound_mme="autodetect"
dumb_sound_specified=""
dumb_sound_options=""
AC_SUBST(DUMB_CONFIG_SOUND) DUMB_CONFIG_SOUND=""
AC_SUBST(DUMB_CONFIG_SOUND_LDADD) DUMB_CONFIG_SOUND_LDADD=""
DUMB_ARG_HELP(
  [  Sound: Choose one system.  [autodetect]])
AC_ARG_WITH(sound,
  [  --without-sound         disable sound altogether],
  if test "$withval" = "no"; then
    DUMB_CONFIG_SOUND=dummy
    AC_MSG_CHECKING(for sound)
    AC_MSG_RESULT(disabled)
  else
    AC_MSG_WARN([--with-sound not supported; use --with-uss or --with-mme])
  fi)
DUMB_ARG_MULTICHOICE(sound, oss, oss,
  [  --with-oss              use Open Sound System (Linux usually has this)])
DUMB_ARG_MULTICHOICE(sound, mme, mme,
  [  --with-mme              use MME for sound (for Alphas)])
DUMB_TEST_MULTICHOICE(DUMB_CONFIG_SOUND, sound, oss, OSS,
  DUMB_CONFIG_SOUND="linux"
  DUMB_CONFIG_SOUND_LDADD="",
  AC_CHECK_HEADER(linux/soundcard.h,
    DUMB_CONFIG_SOUND="linux"
    DUMB_CONFIG_SOUND_LDADD=""))
DUMB_TEST_MULTICHOICE(DUMB_SOUND, sound, mme, MME,
  DUMB_CONFIG_SOUND="mme"
  DUMB_CONFIG_SOUND_LDADD="-lmme",
  DUMB_CHECK_HDR_LIB(mme/mme_api.h, mme, waveOutGetNumDevs, [], 
    DUMB_CONFIG_SOUND="mme"
    DUMB_CONFIG_SOUND_LDADD="-lmme", []))
AC_MSG_CHECKING(which sound driver to use)
if test -z "$DUMB_CONFIG_SOUND"; then
  DUMB_CONFIG_SOUND="dummy"
fi
AC_MSG_RESULT($DUMB_CONFIG_SOUND)
AC_MSG_CHECKING(for sound bit/channel options)
DUMB_ARG_HELP(
  [                          The following options apply to both OSS and MME:])
AC_ARG_ENABLE(16bit-sound,
  [  --disable-16bit-sound   - force 8-bit sound [16-bit]], ,
  enable_16bit_sound="yes")
AC_ARG_ENABLE(stereo-sound,
  [  --disable-stereo-sound  - force mono sound [stereo]], ,
  enable_stereo_sound="yes")
if test "$enable_16bit_sound" = "no"; then
  dumb_sound_options="$dumb_sound_options 8-bit"
else
  dumb_sound_options="$dumb_sound_options 16-bit"
  AC_DEFINE(DUMB_CONFIG_SOUND_16BIT)
fi
if test "$enable_stereo_sound" = "no"; then
  dumb_sound_options="$dumb_sound_options mono"
else
  dumb_sound_options="$dumb_sound_options stereo"
  AC_DEFINE(DUMB_CONFIG_SOUND_STEREO)
fi
AC_MSG_RESULT($dumb_sound_options)

dnl --- Networking.
dnl Because only Unix and dummy networking are supported,
dnl I left out the force/disable options.
dumb_network="dummy"
DUMB_NETWORK_LDADD=""
AC_CHECK_HEADER(sys/socket.h,
[# The system has socket.h.  Now check if socket() can be used without any
# special libraries.  If not, try -lsocket.  If that doesn't help, cancel
# networking.
AC_CHECK_FUNC(socket, [dumb_network="unix"],
 [AC_CHECK_LIB(socket, socket, 
   [dumb_network="unix" DUMB_NETWORK_LDADD="-lsocket"],
   [AC_MSG_WARN([you have socket.h but no socket()])])])])
AC_MSG_CHECKING(which network driver to use)
DUMB_NETWORK_SOURCES="${dumb_network}_net.c"
AC_SUBST(DUMB_NETWORK_SOURCES)
AC_SUBST(DUMB_NETWORK_LDADD) 
AC_MSG_RESULT($dumb_network)
if test "$dumb_network" = unix; then
  # We'll manage even without select() but use it if it exists.
  AC_CHECK_FUNCS(select)
fi

dnl --- Framebuffer bytes.
AC_MSG_CHECKING(what kind of framebuffers to support)
dumb_bpp_names=""
AC_SUBST(DUMB_RENDER_SOURCES) DUMB_RENDER_SOURCES=""
DUMB_ARG_HELP(
  [  Framebuffer bits: Disable at most two.  [support all]])
AC_ARG_ENABLE(8bpp,
  [  --disable-8bpp          don't support framebuffers with 8 bits per pixel])
AC_ARG_ENABLE(16bpp,
  [  --disable-16bpp         don't support framebuffers with 16 bits per pixel])
AC_ARG_ENABLE(32bpp,
  [  --disable-32bpp         don't support framebuffers with 32 bits per pixel])
if test "$enable_8bpp" != "no"; then
  dumb_bpp_names="$dumb_bpp_names 8bpp"
  DUMB_RENDER_SOURCES="$DUMB_RENDER_SOURCES render8.c"
  AC_DEFINE(DUMB_CONFIG_8BPP)
fi
if test "$enable_16bpp" != "no"; then
  dumb_bpp_names="$dumb_bpp_names 16bpp"
  DUMB_RENDER_SOURCES="$DUMB_RENDER_SOURCES render16.c"
  AC_DEFINE(DUMB_CONFIG_16BPP)
fi
if test "$enable_32bpp" != "no"; then
  dumb_bpp_names="$dumb_bpp_names 32bpp"
  DUMB_RENDER_SOURCES="$DUMB_RENDER_SOURCES render32.c"
  AC_DEFINE(DUMB_CONFIG_32BPP)
fi
if test -n "$dumb_bpp_names"; then
  AC_MSG_RESULT($dumb_bpp_names)
else
  AC_MSG_RESULT(nothing!)
  AC_MSG_WARN(No support included for framebuffers of any depth)
fi

dnl --- Output.
AC_OUTPUT(Makefile libdumbutil/Makefile libdumbwad/Makefile libdumb/Makefile
  dumb/Makefile xwad/Makefile tool/Makefile doom/Makefile htic/Makefile
  docs/Makefile)

dnl Local Variables:
dnl comment-start: "dnl "
dnl comment-end: ""
dnl comment-start-skip: "\\bdnl\\b\\s *"
dnl compile-command: "autoconf"
dnl End:
