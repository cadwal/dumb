						       -*- outline -*-
This corresponds to DUMB 0.13.1.

You should also read ../INSTALL for general installation instructions.
This configure.txt lists mostly DUMB-specific options.

* Not Yet Implemented

Cross compilation (because of endianness, setvbuf(), having to run
ptcomp).

All #ifdefs.

* Installation

Change to the dumb root directory (so that this file is
./docs/autoconf).

Run "./configure".  A Makefile will be generated.

Run "make install".  It'll build everything and install the binaries
in /usr/local/bin and patch WADs in /usr/local/share unless you told
"configure" to use other directories.  If you want the executables
stripped, you can use "make install-strip" instead.

If you want special features, give parameters to "configure".  Use
--help to get a list of options.  If you give --with or --enable
options that "configure" doesn't understand, it'll silently ignore
them.  Sorry.

It's good to have CFLAGS="-O2 -g -Wall" in the environment when
running the script.  Otherwise it will assume "-g -O2" and the
compiler won't warn you if there's something suspicious.

If you have installed AA-lib or something else in your home directory
and want DUMB to use it, put these in the environment:
	LDFLAGS=-L$HOME/lib
	CPPFLAGS=-I$HOME/include
where $HOME is expanded by the shell when setting the environment
variables.

To install DUMB in your home directory, give --prefix=$HOME to
"configure".  Then "make install" will put the binaries in $HOME/bin.
Do not use --prefix=~.  The tilde won't be properly expanded.

* VPATH build

It is possible to compile DUMB in one directory while having the
sources in another directory.

This is called a VPATH build.  The name comes from the VPATH variable
that lets "make" find files in other directories.

To do it:

1) You must have the sources in some directory.  In the following,
   I'll call that directory /cdrom/sources/dumb-0.13.0.  DUMB must not
   have been configured in that directory.

2) Make somewhere a directory where you'll compile DUMB.

    $ mkdir ~/dumb
    $ cd ~/dumb

3) Configure it.

    $ /cdrom/sources/dumb-0.13.0/configure

   You can use all the usual parameters.

   The configure script will look for the sources first in its own
   directory and then in the parent directory.  If you have done
   something tricky like moved the script, and it can't find the
   sources, use --srcdir=DIRECTORY to tell it the location.

   The script will produce config.h, Makefile, some other files and a
   set of directories containing Makefiles.  These Makefiles will have
   the VPATH variable correctly set.

4) Run make, make install or whatever.  The sources are read from
   where they are.  Compiled objects and linked executables are
   written to the directories created by the configure script.

* Main options

--help
  The most important option.  Gives you short descriptions for every
  option.

* Compilation options

--disable-c
  Force C++ compilation.

  DUMB is always compiled as C++ on big-endian machines; this switch
  forces C++ compilation on little-endian machines too.

  I use this for hunting down language dependencies that could cause
  compilation to fail on big-endian systems.

  In the future, C compilation is likely to be dropped altogether.

* Graphics options

There used to be a lot more options but I removed them.  If you need
the ability to force/disable a graphics driver on the command line,
please write to me at tosi@stekt.oulu.fi.  Or you can edit
config.cache.

For each graphics system found, a separate DUMB executable will be built:

	aadumb       AA-lib
	dummydumb    dummy video
	ggidumb      GGI
	ldumb        SVGAlib
	xdumb        X11 (including DGA)

Each of these executables is only linked with the (possibly dynamic)
libraries it requires, so you can copy some of them to machines that
don't have all the libraries your build machine had.

--with-x, --without-x
  Force or disable use of the X Window System.  If X is used, you'll
  also get binaries for the programs XProtoThing and XWad.  To force
  --with-x, you may have to specify the X include and library
  directories with --x-includes=DIR and --x-libraries=DIR, unless
  "configure" can autodetect them.  (In which case you wouldn't need
  to give --with-x either.)

--enable-dummy-video
  Build the dummydumb dummy-video executable in addition to any
  others.  Dummy video means that the program won't open any window or
  such to show you what's going on; it'll just sit and calculate.  It
  also means that you can't control the game.  And it's rather boring
  to play.

  Dummy video could be useful for a dedicated DUMB server that didn't
  waste CPU time drawing the world.  In the current implementation
  however, DUMB still renders the image as a bitmap even though it
  doesn't draw it on the screen, and that slows things down.

  Dummy video might also be useful if you really don't have any real
  video library and still want to see that DUMB compiles and runs.
  But in that case, you'd better get AA-lib.

  In DUMB 0.11, dummy video was automatically enabled if no video
  libraries were found.  Not any more.

* Sound options

The sound drivers differ from the video drivers in that you can only
have one of them enabled.  If you force one of them to be used, all
others will be disabled.  As soon as "configure" finds a driver that
it can use, it'll stop looking.

--without-sound
  Disable sound.  Overrides the options below.

--with-oss, --without-oss
  Use the Open Sound System that was created by Hannu Savolainen for
  Linux and has been ported to BSD at least.  There are free and
  commercial versions of OSS; DUMB doesn't care which one you have.

--with-mme, --without-mme
  Use the MME library included in Digital Unix.  The interface seems
  to stem from Microsoft Windows, so perhaps this driver could be used
  in a Windows version of DUMB too.

* DOOM and Heretic options

DUMB supports playing DOOM and Heretic levels if you tell "configure"
where the WADs are.

The GNU Coding Standards say that --with options shouldn't be used for
file names.  I'll fix this in a future version of DUMB.

--with-doom-wad=FILE
  Use doom*.wad from FILE.  It is an error if the file doesn't exist
  or is unreadable or a directory.

  FILE must be an absolute filename.  Relative ones will cause an
  error when compiling the patch WADs.

  If this option isn't given, "configure" will look for doom*.wad in
  some obvious places.  See configure.in for the list.

--without-doom-wad
  Don't look for doom*.wad.

--with-heretic-wad=FILE
--without-heretic-wad
  As above but for heretic.wad.

* Framebuffer options

DUMB supports framebuffers that have 8, 16 or 32 bits per pixel.  The
renderer is compiled for each BPP value separately, the versions are
all linked together, and DUMB will choose the right one when run.  If
you don't need support for some BPP value, you can leave it out to
speed up compilation:

--disable-8bpp
  Disable support of framebuffers with 8 bits per pixel.

--disable-16bpp
  Disable support of framebuffers with 16 bits per pixel.

--disable-32bpp
  Disable support of framebuffers with 32 bits per pixel.

If you disable all BPPs, "configure" will warn you but continue.  The
game can't then be played.  But tools like ptcomp will work.

* Networking

This is like sound; you can only choose one of these options.
Currently, only Unix networking (Berkeley sockets) is supported.

--without-net
  Disable networking.  Actually, this uses a dummy network driver, but
  you don't have to care of that.

--with-unix-net, --without-unix-net
  Force or disable master-slave Unix networking.  This uses UDP
  datagrams and system calls gethostbyname(), htons(), socket(),
  bind(), fcntl(), close(), recvfrom(), select() and sendto().

