This is Info file dumb-pt.info, produced by Makeinfo version 1.68 from
the input file dumb-pt.texinfo.

INFO-DIR-SECTION Games
START-INFO-DIR-ENTRY
* pt: (dumb-pt).                     The .pt language used by the DUMB 3D
                                     game engine.
* ptcomp: (dumb-pt)Invoking ptcomp.  The compiler for that language.
END-INFO-DIR-ENTRY

   This is Edition 0.13.7, last updated 13 March 1999, of `The `.pt'
Language', for DUMB, Version 0.13.7.

   Copyright 1999 Kalle Niemitalo <tosi@stekt.oulu.fi>

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.


File: dumb-pt.info,  Node: Top,  Next: Invoking ptcomp,  Prev: (dir),  Up: (dir)

The `.pt' Language
******************

   Scripts written in the `.pt' language customize the DUMB 3D game
engine to the needs of a specific game.

   This is Edition 0.13.7 of `The `.pt' Language', last updated 13
March 1999 for DUMB Version 0.13.7.

* Menu:

* Invoking ptcomp::             How to run the compiler.
* Syntax::                      Syntax of `.pt' scripts.
* Conventions::                 How to read this manual.

* TimeUnits::                   Changing default time units.
* Gettable::                    Defining Gettables.
* Proto::                       Defining ProtoThings.
* Level::                       Defining Levels.

* Concept Index::               An entry for each concept.
* Keyword Index::               An entry for each keyword.

 -- The Detailed Node Listing --

Syntax of `.pt' scripts

* Tokens::                      What the scripts are made of
* N_::                          Marking strings for translation

How to read this manual

* Sample clause::               How this manual explains clauses.
* Arc::                         Arc parameter syntax
* Time::                        Time parameter syntax

Defining Gettables

* Amounts::                     How much the player has and can have.
* Icon::
* Items::                       Weapons and inventory items.
* Special::                     Some Gettables denote special features.

Defining ProtoThings

* Powerups::                    Players may be able to pick it up.

Powerups

* Gets::                        What the player gets.
* PickupSound::                 A sound can be emitted.
* PickupMessage::               One of three messages is shown.

Defining Levels

* Secret::                      Secret levels


File: dumb-pt.info,  Node: Invoking ptcomp,  Next: Syntax,  Prev: Top,  Up: Top

Invoking `ptcomp'
*****************

   `ptcomp' compiles `.pt' scripts to the binary format used by DUMB.
It creates several lumps: one for Gettables, one for ProtoThings, one
for Sounds, etc.  It can save all the lumps in one big WAD file, but it
can also save each lump in a separate file.  You must use either
`--output-directory=DIRECTORY' or `--output-wad=WADFILE' to choose what
it does.

   A `.pt' script usually contains C preprocessor directives like
`#include <dumb/dumbdefs.pt>'.  `ptcomp' does not understand those
directives, so the script must be run via the C preprocessor before
giving it to `ptcomp'.  Do something like this:

     /lib/cpp INPUT.pt | ptcomp -o OUTPUT.wad

   Unfortunately, the C preprocessor may not understand C++-style `//'
comments which the scripts tend to use.  If you are using GNU `cpp',
you can use its `-lang-c++' option. *Note Invoking the C Preprocessor:
(cpp)Invocation.  Otherwise, you have a problem.  It would be best not
to use `//' comments in `.pt' scripts.

   Here are the options `ptcomp' understands:

`--output-wad=WADFILE'
`-o WADFILE'
     Create a WAD file called WADFILE and write the lumps in it.  This
     is now the recommended way of using `ptcomp'.

`--output-directory=DIRECTORY'
`-d DIRECTORY'
     Write each lump in a separate file in DIRECTORY.  The files
     `PHASES.lump', `PROTOS.lump', `GETTABLE.lump', `LINETYPE.lump',
     `SECTTYPE.lump', `SOUNDS.lump', `ANIMTEX.lump' and `LEVINFO.lump'
     are generated.  Some of them may be empty if the script doesn't
     define such objects.  You can use the `wadtool' utility to combine
     them into a WAD later, perhaps with other lumps.

`--fake-strings'
     If `ptcomp' sees a name token when it expects a string, it normally
     aborts compilation.  But if `--fake-strings' is given, it instead
     quietly translates names to strings where needed.

`--help'
     Print a usage message listing all available options, then exit
     successfully.

`--version'
     Print the version number, then exit successfully.


File: dumb-pt.info,  Node: Syntax,  Next: Conventions,  Prev: Invoking ptcomp,  Up: Top

Syntax of `.pt' scripts
***********************

   Scripts are usually fed through the C preprocessor before giving
them to `ptcomp'.  Thus C comments and preprocessor directives can be
used.

   After preprocessing, scripts consist of tokens separated by tabs and
spaces.  The number of spaces doesn't matter.

* Menu:

* Tokens::                      What the scripts are made of
* N_::                          Marking strings for translation


File: dumb-pt.info,  Node: Tokens,  Next: N_,  Prev: Syntax,  Up: Syntax

Tokens
======

   There are three major kinds of tokens:

Newline
     Newlines may appear between clauses but not inside them.

String
     If the token begins with a double quote `"', it is a string.  The
     string can contain spaces and doesn't end until a closing quote is
     found.

     The C-style backslash escapes `\"', `\'' and `\\' can be used to
     embed quotes and backslashes in the string.  Other sequences like
     `\a' and `\x1B' have not been implemented; `ptcomp' gives an error
     message if it sees those.

     Strings seen by players should be wrapped in the `N_' macro.
     *Note N_::.

Other
     If the token isn't a newline or a string, it ends at the next
     whitespace character (which may itself be a new token, if it is a
     newline).  Numbers, names and keywords fall in this class.  The
     recognition of keywords is context-sensitive: `Proto' is
     interpreted as a keyword if it begins a declaration, but if it
     follows a keyword which expects a name, it is taken as a name.

     Keywords are case-insensitive.  *Note Keyword Index::.


File: dumb-pt.info,  Node: N_,  Prev: Tokens,  Up: Syntax

Marking strings for translation
===============================

   If a string is going to be shown to the player, it should be wrapped
in the `N_' macro, like this:

     PickupMessage N_("Picked up a stimpak.")

   The macro is defined in `<dumb/dumbdefs.pt>' which your `.pt' script
should `#include'.

   The purpose of `N_' is to mark the string for translation, so that
people around the world can get the messages in their own languages.
DUMB is not smart enough to automatically translate messages to the
languages of the world, but it can use the GNU `gettext' library (*note
About `gettext': (gettext)gettext.) to look up the translations from a
file if someone first collects them there.  The `xgettext' program can
be made to scan files for strings wrapped in `N_' macros and present
the list to the person translating them to another language.  *Note
Invoking the `xgettext' Program: (gettext)xgettext Invocation.

   Do not use `N_' on sprite names or other such things the player will
never see.


File: dumb-pt.info,  Node: Conventions,  Next: TimeUnits,  Prev: Syntax,  Up: Top

How to read this manual
***********************

   FIXME: some blurb

* Menu:

* Sample clause::               How this manual explains clauses.
* Arc::                         Arc parameter syntax
* Time::                        Time parameter syntax


File: dumb-pt.info,  Node: Sample clause,  Next: Arc,  Prev: Conventions,  Up: Conventions

Sample clause
=============

   Here's one example of how the syntax of `.pt' clauses is shown in
this manual:

 - Clause in `Gettable':  Gets GETTABLE HOWMANY:INTEGER [Maximum
          MAX:INTEGER]
     FIXME: How to write this example so that it doesn't generate an
     index entry?

   This clause begins with the `Gets' keyword.  The keyword must be
followed by two parameters: GETTABLE which is the name of some
Gettable, and HOWMANY which is an integer.  In these syntax
descriptions, the colon (`:') separates the names of parameters from
their types.  The type of GETTABLE is omitted, since it should be
obvious from the name.

   After HOWMANY, there may be a `Maximum' keyword followed by the MAX
parameter which is an integer.  This part is surrounded by square
brackets (`[]') which mean it is optional.

   Colons and square brackets are not used in real `.pt' scripts, except
perhaps in strings.


File: dumb-pt.info,  Node: Arc,  Next: Time,  Prev: Sample clause,  Up: Conventions

Arc parameter syntax
====================

   Arcs are quantities like 180deg or 2pi.  When a keyword expects an
arc parameter, you can form it in any of the following ways:

`INTEGERdeg'
     `360deg' is a full circle; `180deg' is half of it.

`[INTEGER]pi'
     `2pi' is a full circle; `1pi' or `pi' is half of it.

`[INTEGER]pi/DIVISOR'
     As above but divided with DIVISOR which must also be an integer.
     So, `pi/5' or `2pi/10' would be the same as `36deg'.

`INTEGER'
     This is an obsolete syntax which should not be used any more.  It
     means `0deg' if INTEGER is 0, or `pi/INTEGER' otherwise.


File: dumb-pt.info,  Node: Time,  Prev: Arc,  Up: Conventions

Time parameter syntax
=====================

   When a keyword needs a time as a parameter, use one of the following
syntaxes:

`INTEGERsec'
     INTEGER seconds.

`INTEGERmsec'
     INTEGER milliseconds (1/1000).  The game doesn't really have
     millisecond accuracy but you can pretend it has.

`INTEGERhsec'
     INTEGER hundredths of seconds (1/100).

`INTEGERticks'
     INTEGER timer ticks.  As of DUMB 0.13.7, there are 100 ticks per
     second.

`INTEGER'
     If the time unit isn't given, the default unit is used.  It
     defaults to ticks but can be changed with the `TimeUnits' clause.
     *Note TimeUnits::.


File: dumb-pt.info,  Node: TimeUnits,  Next: Gettable,  Prev: Conventions,  Up: Top

Changing default time units
***************************

 - Clause in top level:  TimeUnits TIME
     The `TimeUnits' clause changes the default time unit for the rest
     of the script.  If you don't change the default time unit, it is
     `1ticks'.

     TIME can contain both a number and a unit.  For example, after
     `TimeUnits 2ms', the time value `10' would mean `20ms'.

   For a list of time units, see *Note Time::.


File: dumb-pt.info,  Node: Gettable,  Next: Proto,  Prev: TimeUnits,  Up: Top

Defining Gettables
******************

   Gettables are objects carried by players, such as weapons, ammunition
and inventory items.  The player usually gets them by collecting a Thing
from the level, but you can also make the player have some Gettables
right from the beginning of the game.

   Temporary special powers like invisibility are also implemented as
Gettables.  So are health and armour.

 - Clause in top level:  Gettable GETTABLE
     This clause begins the definition of a Gettable called GETTABLE.
     To specify the details of the new Gettable, follow it with the
     other clauses defined in the following sections.

* Menu:

* Amounts::                     How much the player has and can have.
* Icon::
* Items::                       Weapons and inventory items.
* Special::                     Some Gettables denote special features.


File: dumb-pt.info,  Node: Amounts,  Next: Icon,  Prev: Gettable,  Up: Gettable

Amounts of Gettables
====================

 - Clause in `Gettable':  Initial INITIAL:INTEGER
 - Clause in `Gettable':  OneMapOnly
     When the game begins, each player gets INITIAL units of this
     Gettable.  Defaults to 0 if not given.

     If the Gettable is defined as `OneMapOnly', the value is reset to
     INITIAL at the beginning of each map.

 - Clause in `Gettable':  DefaultMaximum MAX:INTEGER [WithBackpack
          MAXWITHPACK:INTEGER]
     When this Gettable is got via a `Gets' clause in a `Proto', the
     maximum possible amount defaults to MAX if not overridden in the
     `Gets' clause.  *Note Gets::.

     However, if the player has a backpack, MAXWITHPACK is used
     instead.  For information on how to define a Gettable as the
     backpack, see *Note Special::.


File: dumb-pt.info,  Node: Icon,  Next: Items,  Prev: Amounts,  Up: Gettable

Icon of Gettable
================

   FIXME: describe what the icons are, also `--dumb-uncrowd'

 - Clause in `Gettable':  Icon ICON:STRING9
     FIXME: document

 - Clause in `Gettable':  IconPos XO:INTEGER YO:INTEGER
 - Clause in `Gettable':  XCenter
 - Clause in `Gettable':  YCenter
     FIXME: document

 - Clause in `Gettable':  Anim CHAR
 - Clause in `Gettable':  RevAnim CHAR
     FIXME: document

 - Clause in `Gettable':  Timing TIME
     FIXME: document


File: dumb-pt.info,  Node: Items,  Next: Special,  Prev: Icon,  Up: Gettable

Weapons and inventory items
===========================

   FIXME: explain why to use these, and what key bindings apply

 - Clause in `Gettable':  WepSel
 - Clause in `Gettable':  SpeSel
     FIXME: document

 - Clause in `Gettable':  Bogotype PROTO
     FIXME: document

 - Clause in `Gettable':  Ammo AMMO:GETTABLE COUNT:INTEGER
     When this Gettable is used as a weapon, use up COUNT units of
     AMMO.  If there is not enough ammo, the weapon cannot be used.

     By default, weapons don't need ammo.

     This clause has no effect to what kind of missiles the weapon
     sends.  That is defined by the `Spawns' clause in the weapon's
     bogothing.  FIXME: add a link when Spawns has been documented


File: dumb-pt.info,  Node: Special,  Prev: Items,  Up: Gettable

Special features as Gettables
=============================

   In addition to weapons and other tangible items, Gettables can also
represent other properties of the player, like health and armour.  This
way, the same mechanism which gives the player bullets when he picks up
a clip, can be used to increase his health when he picks up a health
bonus.

 - Clause in `Gettable':  Special CODE:ENUM
     This clause marks the Gettable as denoting one special feature.

     CODE must be one of the following constants, defined in
     `<dumb/dumbdefs.pt>':

    `GETT_SPC_HEALTH'
          This marks the Gettable as your health.  When you get damage,
          it's taken from the health.  If health goes to 0, you die.

    `GETT_SPC_ARMOUR'
          This marks the Gettable as your armour.  When you have
          armour, half of the damage you get is taken from it.

    `GETT_SPC_INVISIBILITY'
          If you have this Gettable, you are invisible.

    `GETT_SPC_DAMAGEPROTECTION'
          If you have this Gettable, you can't be hurt at all.

    `GETT_SPC_SLIMEPROTECTION'
          If you have this Gettable, the icky goo on the floor doesn't
          hurt you.

    `GETT_SPC_SUPERSIGHT'
          If you have this Gettable, you see in the dark.

    `GETT_SPC_BACKPACK'
          When you collect items, DUMB checks whether you have the
          backpack.  If so, a different maximum may be used.  *Note
          Amounts::.

    `GETT_SPC_ALLMAP'
          When you have this Gettable, the map shows you even the
          places you haven't visited yet.


   It is not possible to use the same special number in two Gettables,
but you can define several powerups which give different amounts of the
same Gettable to the player.  *Note Gets::.


File: dumb-pt.info,  Node: Proto,  Next: Level,  Prev: Gettable,  Up: Top

Defining ProtoThings
********************

 - Clause in top level:  Proto PROTO [ID:INTEGER]
     FIXME: document

* Menu:

* Powerups::                    Players may be able to pick it up.


File: dumb-pt.info,  Node: Powerups,  Prev: Proto,  Up: Proto

Powerups
========

   Powerups are Things which award the player one or more Gettables
(*note Gettable::.)

   You turn a Thing to a powerup by adding one or more `Gets' clauses
in the ProtoThing defining that Thing.  They take effect when a player
collides with the Thing.  Until then, the powerup may even behave like a
monster if you define it as one.

   You can also define a sound and messages which are emitted when the
powerup is collected.

* Menu:

* Gets::                        What the player gets.
* PickupSound::                 A sound can be emitted.
* PickupMessage::               One of three messages is shown.


File: dumb-pt.info,  Node: Gets,  Next: PickupSound,  Prev: Powerups,  Up: Powerups

Gettables from a powerup
------------------------

 - Clause in `Proto':  Gets GETTABLE HOWMANY:INTEGER [Maximum
          MAX:INTEGER]
     Adding this clause in a `Proto' turns the Things it describes to
     powerups which the player can pick up.

     If MAX isn't given, it defaults to one of the values given in the
     `DefaultMaximum' clause of GETTABLE.  Which value is used depends
     on whether the player has a backpack.  *Note Special::.

     If the player already has MAX or more units of GETTABLE, he
     doesn't pick the Thing up.  The `IgnoreMessage' may be printed in
     this case.  *Note PickupMessage::

     Otherwise, he gets HOWMANY units more.  Then, if he has more than
     MAX units, the amount is clipped to MAX.

   You can write multiple `Gets' clauses in one ProtoThing.  When the
player collects such a powerup, he gets all the Gettables listed.  He
will ignore the powerup only if none of the clauses would give him
Gettables.


File: dumb-pt.info,  Node: PickupSound,  Next: PickupMessage,  Prev: Gets,  Up: Powerups

PickupSound
-----------

 - Clause in `Proto':  PickupSound SOUND
     FIXME: document


File: dumb-pt.info,  Node: PickupMessage,  Prev: PickupSound,  Up: Powerups

Powerup messages
----------------

 - Clause in `Proto':  FirstPickupMessage FIRSTPICKUPMESSAGE:STRING
 - Clause in `Proto':  PickupMessage PICKUPMESSAGE:STRING
     When a player succeeds in picking up the powerup, DUMB shows either
     FIRSTPICKUPMESSAGE or PICKUPMESSAGE.  If the player didn't already
     have the Gettable which the ProtoThing gives and
     FIRSTPICKUPMESSAGE is defined, DUMB prints that; otherwise, DUMB
     prints PICKUPMESSAGE if that is defined.

     If the ProtoThing has multiple `Gets' clauses and thus gives many
     different Gettables, only the first of them affects the choice of
     message.

     `FirstPickupMessage' may be useful with decaying Gettables like
     temporary invisibility: DUMB can show FIRSTPICKUPMESSAGE when the
     player becomes invisible and PICKUPMESSAGE when he gets more time
     for the invisibility.  Currently, there is no way to specify a
     message to be shown when the Gettable has decayed completely and
     the player becomes visible again; if such a feature were added, it
     would belong in `Gettable', not `Proto'.

 - Clause in `Proto':  IgnoreMessage IGNOREMESSAGE:STRING
     When a player attempts to pick up the powerup but can't carry it,
     DUMB shows him the IGNOREMESSAGE.  If you don't define that, no
     message is shown.

   The message strings should be wrapped in the `N_' macro.  *Note N_::


File: dumb-pt.info,  Node: Level,  Next: Concept Index,  Prev: Proto,  Up: Top

Defining Levels
***************

   An episode usually consists of several levels (also known as maps or
missions) which the player plays in sequence.  Each of those levels
needs a separate `Level' clause in the `.pt' script.  This example is
from DUMB's `doom/levels.pt':

     Level "E1M1"  Music "D_E1M1"  Sky "SKY1"  StartGame
     Level "E1M2"  Music "D_E1M2"  Sky "SKY1"
     Level "E1M3"  Music "D_E1M3"  Sky "SKY1"  Secret "E1M9"
     Level "E1M4"  Music "D_E1M4"  Sky "SKY1"
     Level "E1M5"  Music "D_E1M5"  Sky "SKY1"
     Level "E1M6"  Music "D_E1M6"  Sky "SKY1"
     Level "E1M7"  Music "D_E1M7"  Sky "SKY1"
     Level "E1M8"  Music "D_E1M8"  Sky "SKY1"  EndGame
     Level "E1M9"  Music "D_E1M9"  Sky "SKY1"  Next "E1M4"

   Since `E1M1' has the `StartGame' flag, the game will start there.
When the player finishes `E1M1', he's taken to `E1M2', from there to
`E1M3' and so on.  `E1M8' is marked with `EndGame', so the game ends
when the player gets to the exit there.  `E1M9' is a secret level.

* Menu:

* Secret::                      Secret levels


File: dumb-pt.info,  Node: Secret,  Prev: Level,  Up: Level

Secret levels
=============

   A level can have a secret exit which breaks the usual sequence of
levels and takes the player somewhere else.  The `Secret' clause defines
where it leads:

 - Clause in `Level':  Secret SECRET:LEVEL
     When the player exits this level via the secret exit, take him to
     SECRET, not the usual next level.

     For example, DUMB's `doom/levels.pt' contains these lines:

          Level "E1M3"  Music "D_E1M3"  Sky "SKY1"  Secret "E1M9"
          Level "E1M4"  Music "D_E1M4"  Sky "SKY1"

     If the player goes to the secret exit in `E1M3', he is taken to
     `E1M9'.  The normal exit would take him to `E1M4'.

     If you don't use `Secret', the secret exit behaves just like the
     normal exit.

   When the player finishes a secret level, he should be taken back to
the normal sequence.  This could be done by making the secret level's
exit another secret exit and using `Secret' to direct that to the
correct level, but in Doom maps it is a normal exit.  So we have the
`Next' keyword for changing the destination of the normal exit:

 - Clause in `Level':  Next NEXT:LEVEL
     When the player exits this level via the normal exit, take him to
     NEXT, not the usual next level.

     Here is a piece of `doom/levels.pt':

          Level "E1M8"  Music "D_E1M8"  Sky "SKY1"  EndGame
          Level "E1M9"  Music "D_E1M9"  Sky "SKY1"  Next "E1M4"
          
          Level "E2M1"  Music "D_E2M1"  Sky "SKY2"  StartGame
          Level "E2M2"  Music "D_E2M2"  Sky "SKY2"

     When the player exits `E1M9', he is taken to `E1M4'.  Without
     `Next', the default would have been `E2M1'.

     If there were a secret exit in `E1M9', that too would take the
     player to `E1M4'.  This is because the secret exit's target
     defaults to that of the normal exit unless overridden with
     `Secret'.

   The use of `Secret' and `Next' isn't limited to secret levels; you
could form more complex structures with them.  You shouldn't make links
back to levels the player has already been in, because the status of a
level is lost when the player leaves it, and he would have to fight all
the same monsters again.  But if you want to do this, you can.


File: dumb-pt.info,  Node: Concept Index,  Next: Keyword Index,  Prev: Level,  Up: Top

Concept Index
*************

* Menu:

* <dumb/dumbdefs.pt> <1>:                Special.
* <dumb/dumbdefs.pt>:                    N_.
* arc:                                   Arc.
* armour:                                Special.
* backpack:                              Special.
* clause:                                Sample clause.
* computer area map:                     Special.
* damage protection:                     Special.
* episode:                               Level.
* god mode:                              Special.
* goggles:                               Special.
* health:                                Special.
* inventory:                             Items.
* invisibility:                          Special.
* invulnerability:                       Special.
* level:                                 Level.
* light amplification visor:             Special.
* map <1>:                               Level.
* map:                                   Special.
* mission:                               Level.
* night vision:                          Special.
* radiation suit:                        Special.
* secret exit:                           Secret.
* slime protection:                      Special.
* string:                                Tokens.
* time units:                            Time.
* weapon:                                Items.


File: dumb-pt.info,  Node: Keyword Index,  Prev: Concept Index,  Up: Top

Keyword Index
*************

* Menu:

* Ammo:                                  Items.
* Anim:                                  Icon.
* Bogotype:                              Items.
* DefaultMaximum:                        Amounts.
* EndGame:                               Level.
* FirstPickupMessage:                    PickupMessage.
* Gets <1>:                              Gets.
* Gets:                                  Sample clause.
* Gettable:                              Gettable.
* Icon:                                  Icon.
* IconPos:                               Icon.
* IgnoreMessage:                         PickupMessage.
* Initial:                               Amounts.
* Level:                                 Level.
* Maximum:                               Gets.
* Next:                                  Secret.
* OneMapOnly:                            Amounts.
* PickupMessage:                         PickupMessage.
* PickupSound:                           PickupSound.
* Proto:                                 Proto.
* RevAnim:                               Icon.
* Secret:                                Secret.
* Special:                               Special.
* SpeSel:                                Items.
* StartGame:                             Level.
* TimeUnits:                             TimeUnits.
* Timing:                                Icon.
* WepSel:                                Items.
* WithBackpack:                          Amounts.
* XCenter:                               Icon.
* YCenter:                               Icon.



Tag Table:
Node: Top1198
Node: Invoking ptcomp3007
Node: Syntax5140
Node: Tokens5679
Node: N_6849
Node: Conventions7923
Node: Sample clause8262
Node: Arc9269
Node: Time9969
Node: TimeUnits10662
Node: Gettable11181
Node: Amounts12122
Node: Icon13001
Node: Items13547
Node: Special14341
Node: Proto16169
Node: Powerups16438
Node: Gets17137
Node: PickupSound18192
Node: PickupMessage18372
Node: Level19848
Node: Secret20998
Node: Concept Index23261
Node: Keyword Index24720

End Tag Table
