Installation of DUMB 0.13.4
===========================

The first part of this file describes DUMB-specific configuration
options.  The second part, beginning with Basic Installation, contains
generic installation instructions for GNU software.

Compilation options
-------------------

`--disable-c'
  Force C++ compilation.

  DUMB is always compiled as C++ on big-endian machines; this option
  forces C++ compilation on little-endian machines too.

  I use this for hunting down language dependencies that could cause
  compilation to fail on big-endian systems.

  In the future, C compilation is likely to be dropped altogether.

Optional parts
--------------

`--enable-libdumbworldb'
  Enable compilation of the dumbworldb library.

  This library should be the next-generation way of managing levels
  and objects in memory.  It is not yet complete and the game
  executables don't use it, so it is disabled by default.

  If you enable libdumbworldb, you also get `test/ldltest' which can be
  used to test some of its features.

Graphics options
----------------

For each graphics system found, a separate DUMB executable will be built:

	aadumb       AA-lib
	dummydumb    dummy video
	ggidumb      GGI
	ldumb        SVGAlib
	xdumb        X11 (including DGA)

Each of these executables is only linked with the (possibly dynamic)
libraries it requires, so you can copy some of them to machines that
don't have all the libraries your build machine had.

`--with-x'
`--without-x'
  Force or disable use of the X Window System.  If X is used, you'll
  also get binaries for the programs XProtoThing and XWad.  To force
  `--with-x', you may have to specify the X include and library
  directories with `--x-includes=DIR' and `--x-libraries=DIR', unless
  `configure' can autodetect them.  (In which case you wouldn't need to
  give `--with-x' either.)

`--enable-dummy-video'
  Build the dummydumb dummy-video executable in addition to any
  others.  Dummy video means that the program won't open any window or
  such to show you what's going on; it'll just sit and calculate.  It
  also means that you can't control the game.  And it's rather boring
  to play.

  Dummy video could be useful for a dedicated DUMB server that didn't
  waste CPU time drawing the world.  In the current implementation
  however, DUMB still renders the image as a bitmap even though it
  doesn't draw it on the screen, and that slows things down.

  Dummy video might also be useful if you really don't have any real
  video library and still want to see that DUMB compiles and runs.
  But in that case, you'd better get AA-lib.

  In DUMB 0.11, dummy video was automatically enabled if no video
  libraries were found.  Not any more.

Sound options
-------------

The sound drivers differ from the video drivers in that you can only
have one of them enabled.  If you force one of them to be used, all
others will be disabled.  As soon as `configure' finds a driver that
it can use, it'll stop looking.

These options are usually not necessary, as `configure' detects your
sound system automatically.

`--without-sound'
  Disable sound.  Overrides the options below.

`--with-oss'
`--without-oss'
  Use or disable the Open Sound System that was created by Hannu
  Savolainen for Linux and has been ported to BSD at least.  There are
  free and commercial versions of OSS; DUMB doesn't care which one you
  have.

`--with-mme'
`--without-mme'
  Use or disable the MME library included in Digital Unix.  The
  interface seems to stem from Microsoft Windows, so perhaps this driver
  could be used in a Windows version of DUMB too.

`--with-allegro'
`--without-allegro'
  Use or disable the Allegro library.  It is generally used with the
  DJGPP compiler suite under MS-DOS.  Even if you disable Allegro sound
  with `--without-allegro', Allegro is still needed for graphics.

DOOM and Heretic options
------------------------

DUMB supports playing DOOM and Heretic levels if you tell `configure'
where the WADs are.

The GNU Coding Standards say that --with options shouldn't be used for
file names.  I'll fix this in a future version of DUMB.

`--with-doom-wad=FILE'
  Use doom*.wad from FILE.  It is an error if the file doesn't exist
  or is unreadable or a directory.

  FILE must be an absolute filename.  Relative ones will cause an
  error when compiling the patch WADs.

  If this option isn't given, `configure' will look for doom*.wad in
  some obvious places.  See `configure.in' for the list.

`--without-doom-wad'
  Don't look for doom*.wad.

`--with-heretic-wad=FILE'
`--without-heretic-wad'
  As above but for heretic.wad.

Framebuffer options
-------------------

DUMB supports framebuffers that have 8, 16 or 32 bits per pixel.  The
renderer is compiled for each BPP value separately, the versions are
all linked together, and DUMB will choose the right one when run.  If
you don't need support for some BPP value, you can leave it out to
speed up compilation:

`--disable-8bpp'
  Disable support of framebuffers with 8 bits per pixel.

`--disable-16bpp'
  Disable support of framebuffers with 16 bits per pixel.

`--disable-32bpp'
  Disable support of framebuffers with 32 bits per pixel.

If you disable all BPPs, `configure' will warn you but continue.  The
game can't then be played.  Tools like `ptcomp' will work, though.

Since these options disable features from the program without making
compilation much faster after all, they may be removed in some later
version of DUMB.

Networking
----------

This is like sound; you can only choose one of these options.
Currently, only Unix networking (Berkeley sockets) is supported.

`--without-net'
  Disable networking.  Actually, this uses a dummy network driver, but
  you don't have to care of that.

`--with-unix-net'
`--without-unix-net'
  Force or disable master-slave Unix networking.  This uses UDP
  datagrams and system calls gethostbyname(), htons(), socket(),
  bind(), fcntl(), close(), recvfrom(), select() and sendto().

Basic Installation
==================

   These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.  Or type `make install-strip' to remove debug
     information from the programs in the process.  This makes them
     smaller.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.

